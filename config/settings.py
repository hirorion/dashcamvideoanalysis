"""
Django settings for config project.

Generated by 'django-stocks_app startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import logging
import logging.handlers
from lib.my_log_handler import GroupWriteRotatingFileHandler
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_MODULE = '.'.join(__name__.split('.')[:-1])

VERSION = "TEST Version"

# Quick-start development settings_bak - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%46kxwb&m%jmji4p(rhrcxxf951+zwng^fjsqzqyf2cj=s0)yq'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False
DEBUG = True
LOG_LEVEL = 'DEBUG'

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'accounts.apps.AccountsConfig',
    'registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap4',
    'django_bootstrap_breadcrumbs',
    'webpack_loader',
    'rest_framework',
    'pure_pagination',
    'lib',
    'app_admin.apps.AdminAppConfig',
    'app_user.apps.UserAppConfig',
    'app_ai.apps.AiAppConfig',
    'stocks_app.apps.StocksConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            "debug": True
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'DASHCAM_WEB',  # Or path to database file if using sqlite3.
        'USER': 'postgres',  # Not used with sqlite3.
        'PASSWORD': 'postgres',  # Not used with sqlite3.
        'HOST': 'localhost',  # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',  # Set to empty string for default. Not used with sqlite3.
        #'ATOMIC_REQUESTS': True
    },
    'ai': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'DASHCAM_AI',  # Or path to database file if using sqlite3.
        'USER': 'postgres',  # Not used with sqlite3.
        'PASSWORD': 'postgres',  # Not used with sqlite3.
        'HOST': 'localhost',  # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',  # Set to empty string for default. Not used with sqlite3.
        #'ATOMIC_REQUESTS': True
    }
    #'test': {
    #    'ENGINE': 'django.db.backends.sqlite3',
    #    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #}
}

DATABASE_ROUTERS = ['config.db_router.DbRouter']

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'django_cache_table',
    }
}

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
U_LOGFILE_NAME = os.path.join(BASE_DIR, "logs", "dashcam_web.log")
U_LOGFILE_SIZE = 10 * 1024 * 1024
U_LOGFILE_COUNT = 5

print("Initializing LOGGING in settings.py - if you see this more than once use 'runserver --noreload'")

# グループでの書き込み許可を追加するログローテート設定
logging.handlers.GroupWriteRotatingFileHandler = GroupWriteRotatingFileHandler

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            #'format': ('%(levelname)s %(asctime)s |'
            'format': ('%(levelname)s | %(asctime)s | '
                       '%(name)s:%(lineno)d (in %(funcName)s) | '
                       ' %(message)s ')
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True
        },
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'logfile': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.GroupWriteRotatingFileHandler',
            #'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': U_LOGFILE_NAME,
            #'maxBytes': U_LOGFILE_SIZE,
            #'backupCount': U_LOGFILE_COUNT,
            'when': 'D',
            'formatter': 'verbose',
            "encoding": "utf8"
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': DEBUG,
        },
        'app_user': {  # PROJECT_MODULEだとログがでない
            'handlers': ['console', 'logfile'],
            'level': LOG_LEVEL,
            'propagate': DEBUG,
        },
        'app_admin': {  # PROJECT_MODULEだとログがでない
            'handlers': ['console', 'logfile'],
            'level': LOG_LEVEL,
            'propagate': DEBUG,
        },
        'app_ai': {  # PROJECT_MODULEだとログがでない
            'handlers': ['console', 'logfile'],
            'level': LOG_LEVEL,
            'propagate': DEBUG,
        },
        '*': {  # PROJECT_MODULEだとログがでない
            'handlers': ['console', 'logfile'],
            'level': LOG_LEVEL,
            'propagate': DEBUG,
        },
        'django.db.backends': {
            'handlers': ['console', 'logfile'],
            'level': LOG_LEVEL,
            'propagate': DEBUG,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'

# views.pyで使うパスを定義
#PACKAGE_ROOT = os.path.abspath(os.path.dirname(__file__))

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'assets'),
    os.path.join(BASE_DIR, 'static'),
    #os.path.join('/Users/mitsui', 'temp')
)

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
    }
}

# REST API設定（フィルタ、ページング）
REST_FRAMEWORK = {
    #'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5
}

# Settings for django-bootstrap4
BOOTSTRAP4 = {
    'error_css_class': 'bootstrap4-error',
    'required_css_class': 'bootstrap4-required',
    'javascript_in_head': True,
    'include_jquery': True,
}

BREADCRUMBS_TEMPLATE = 'django_bootstrap_breadcrumbs/bootstrap4.html'

# Auth model
AUTH_USER_MODEL = 'accounts.Users'

# Class based model
LOGIN_URL = '/'

REGISTRATION_OPEN = True        # If True, users can register
ACCOUNT_ACTIVATION_DAYS = 4     # One-week activation window; you may, of course, use a different value.
REGISTRATION_AUTO_LOGIN = True  # アクティベーション後に自動ログイン
#LOGIN_REDIRECT_URL = '/dashboard/'  # The page you want users to arrive at after they successful log in
REGISTRATION_EMAIL_HTML = True

# 認証済みでも登録画面を許可させるため
ACCOUNT_AUTHENTICATED_REGISTRATION_REDIRECTS = False

TIME = 60*60*24  # 24 hours
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = TIME    # change expired session
SESSION_IDLE_TIMEOUT = TIME  # logout
# セッション名
SESSION_COOKIE_NAME = 'dev-dashcamweb-session'

# mail test
# python -m smtpd -n -c DebuggingServer localhost:8025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = "no-reply@localhost"
DEFAULT_FROM_EMAIL = "no-reply@localhost"
EMAIL_HOST = 'localhost'
EMAIL_PORT = 8025
SERVER_EMAIL = "no-reply@localhost"  # update mailのfrom
# これを設定するとDEBUG falseでここへメール送信される(LOGGINGでmail_adminsが設定されている場合）
ADMINS = (('update', 'mitsui@inferret.co.uk'),)

# DOCKERから接続してほしいこのサーバーのIPを記述
URL_HOST_ADDRESS_FROM_DOCKER = "172.20.0.101:8000"

#------------------------------------------------------
# RabbitMQ
#------------------------------------------------------
RABBIT_CONNECTION_HOST = 'localhost'
RABBIT_ID = 'admin'
RABBIT_PASSWORD = 'admin'
RABBIT_PORT = 5672
RABBIT_QUEUE_NAME = 'dashcam-ai-data'
# API from backend to web
RABBIT_QUEUE_NAME_API: str = 'dashcam-ai-api'
# API from web to backend
RABBIT_QUEUE_NAME_API_FS = 'dashcam-ai-api-fs'

#------------------------------------------------------
# movie related
#------------------------------------------------------
# ffprobe
FFPROBE = "/usr/local/bin/ffprobe"
# ffmpeg
FFMPEG = "/usr/local/bin/ffmpeg"
# create tiled preview command
TILE_IMAGE_CMD = os.path.join(BASE_DIR, "tools", "tileimage.sh")

# AVI change flag
USE_CONVERT_AVI = False
# ワークディレクトリ
WS_DIR = "/Users/mitsui"
# アップロードのメディア関係の設定
MEDIA_ROOT = os.path.join(WS_DIR, "temp")
MEDIA_SAVE_TYPE = "local"
# MODELディレクトリ
TEMP_MODEL_DIR = os.path.join(WS_DIR, "temp", "models")
# DATASETSLディレクトリ
DATASETS_DIR = os.path.join(WS_DIR, "temp", "datasets")
# 再学習データセットディレクトリ
TEMP_TRAINING_DIR = os.path.join(WS_DIR, "temp", "trainings")
# 再学習モデルデータセットディレクトリ
RELEARNING_MODEL_DIR = os.path.join(WS_DIR, "model")
# trackingコマンドのパス
TRACKING_PARAMETER_FILENAME = os.path.join(WS_DIR, "temp", "parameter.json")

# 環境切り替え Development
try:
    from config.development import *
except ImportError:
    pass
